#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  write_date=""
  in_file=""
  out_file=""
  work_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'cacaview' \
    'libcaca'
  _check_cmd \
    'sdotool'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_close_keyboard() {
  sdotool \
    key \
      back
}

_caca_view_quit() {
  sleep \
    10
  sdotool \
    key \
      q
}

_encode() {
  local \
    _in="${1}" \
    _pic
  if [[ "${_out_file}" == "" ]]; then
    _msg_error \
      "why" \
      1
  fi
  _pic="$( \
    echo \
      "${_in}" | \
      sed \
        "s/cacaview//g")"  || \
    true
  _msg_info \
    "pic out path: ${_out_file}"
  _msg_info \
    "pic size: ${#_pic}" || 
    true
  printf "%s" \
    "${_pic:30}" > \
    "${_out_file}"
}

_android_cacawrite() {
  local \
    _in="${1}" \
    _out_file="${2}" \
    _tmp
  _tmp="$( \
    maketemp \
      -d)/pic.txt"
  ( sdotool \
     key \
       back & \
   ( sleep \
       10 && \
       sdotool \
         key \
           q ) ) & \
  ( sleep \
      5 && \
      cacaview \
      "${_in}" > \
      "${_tmp}" )
  _content="$( \
    cat \
      "${_tmp}")"
  _encode \
    "${_tmp}"
}

_linux_cacawrite() {
  local \
    _in="${1}" \
    _out_file="${2}" \
    _work_dir="${3}" \
    _tmp \
    _content
  _tmp="$( \
    _get \
      "work" \
      "dir")/pic.txt"
  _msg_info \
    "converting ${_in} in ${_out_file}"
  echo \
   "$( ( sleep \
           5 && \
           echo \
             "q" ) )" | \
     cacaview \
       "${_in}" > \
       "${_tmp}"
  _content="$( \
    cat \
      "${_tmp}")"
  _encode \
    "${_content}" 
}

_cacawrite() {
  local \
    _in="${1}" \
    _out="${2}" \
    _work_dir="${3}" \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    "_android_cacawrite" \
      "${_in}" \
      "${_out}"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    "_linux_cacawrite" \
      "${_in}" \
      "${_out}" \
      "${work_dir}"
  fi
  return \
    0
}

_out_file_auto_detect(){
  local \
    _out='' \
    _in
  _in="$( \
    _get \
      "in" \
      "file")"
  if [[ "${_in}" != "" ]]; then
    _out="${_in}.txt"
  fi
  echo \
    "${_out}"
}

_set_overrides() {
  _set_override \
    "write" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "out" \
    "file" \
    "$(_out_file_auto_detect)"
  _set_override \
    "work" \
    "dir" \
    "$(mktemp \
         -d)"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Converts an image into text.

Usage:
  $(_get "app" "name")
    [options]
    <in_file>
    (<out_file>)
  options:
     -w <work_dir>        Working directory.

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Write date:   $(_get "write" "date")"
  _msg_info "           Work directory:   $(_get "work" "dir")"
  _msg_info "                  In file:   $(_get "in" "file")"
  _msg_info "                 Out file:   $(_get "out" "file")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'w:cvh?' \
    arg; do
  case \
    "${arg}" in
    w) override_work_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 == $# )); then
  _msg_error \
    "no input file" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "in" \
    "file" \
    "$(realpath \
         "${1}")"
fi
if (( 1 < $# )); then
  _set \
    "out" \
    "file" \
    "${2}"
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "in" \
       "file")"
  "$(_get \
       "out" \
       "file")"
  "$(_get \
       "work" \
       "dir")"

)
_cacawrite \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
